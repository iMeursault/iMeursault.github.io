<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bag-of-words model</title>
    <link href="/2023/12/20/bag-of-words-model/"/>
    <url>/2023/12/20/bag-of-words-model/</url>
    
    <content type="html"><![CDATA[<h1 id="Bag-of-words-model"><a href="#Bag-of-words-model" class="headerlink" title="Bag-of-words model"></a>Bag-of-words model</h1><p>The bag-of-words mode assuming the text or document is a unordered set of word. It just like put all the words into a bag, this bag contains all the information about the document. It ignore the word order but captures the multiplicity. Bag-of-words model is a basic model in Natural Language Processing and Information Retrieval.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Here are two text documents:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">(<span class="hljs-number">1</span>) John likes <span class="hljs-keyword">to</span> watch movies. Mary likes movies too.<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-number">2</span>) Mary <span class="hljs-keyword">also</span> likes <span class="hljs-keyword">to</span> watch football games.<br></code></pre></td></tr></table></figure><p>We can construct two list based on these text documents:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;likes&quot;</span>,<span class="hljs-string">&quot;to&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>,<span class="hljs-string">&quot;movies&quot;</span>,<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;likes&quot;</span>,<span class="hljs-string">&quot;movies&quot;</span>,<span class="hljs-string">&quot;too&quot;</span><br><br><span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;also&quot;</span>,<span class="hljs-string">&quot;likes&quot;</span>,<span class="hljs-string">&quot;to&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>,<span class="hljs-string">&quot;football&quot;</span>,<span class="hljs-string">&quot;games&quot;</span><br></code></pre></td></tr></table></figure><p>Then we can transform list to dictionary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BoW1 = &#123;<span class="hljs-string">&quot;John&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;likes&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;to&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;watch&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;movies&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Mary&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;too&quot;</span>:<span class="hljs-number">1</span>&#125;;<br>BoW2 = &#123;<span class="hljs-string">&quot;Mary&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;also&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;likes&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;to&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;watch&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;football&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;games&quot;</span>:<span class="hljs-number">1</span>&#125;;<br></code></pre></td></tr></table></figure><p>The order inside the dictionary is free. And if one document is like a union of these two, this document’s dictionary will shows as follow:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BoW3 = &#123;<span class="hljs-string">&quot;John&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;likes&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;to&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;watch&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;movies&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Mary&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;too&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;also&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;football&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;games&quot;</span>:<span class="hljs-number">1</span>&#125;;<br></code></pre></td></tr></table></figure><p>Also can be represented as:</p><p>$$<br>BoW3 &#x3D; BoW1\uplus BoW2<br>$$</p><h2 id="Implementation-with-PyTorch"><a href="#Implementation-with-PyTorch" class="headerlink" title="Implementation with PyTorch"></a>Implementation with PyTorch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchtext<br><span class="hljs-keyword">from</span> torchtext.data <span class="hljs-keyword">import</span> get_tokenizer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sentence_to_bow</span>(<span class="hljs-params">sentence: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    tokenizer = get_tokenizer(<span class="hljs-string">&quot;basic_english&quot;</span>)<br>    tokens = tokenizer(sentence)<br>    bow = &#123;&#125;<br>    <span class="hljs-keyword">for</span> token <span class="hljs-keyword">in</span> tokens:<br>        <span class="hljs-keyword">if</span> token <span class="hljs-keyword">in</span> bow:<br>            bow[token] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            bow[token] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> bow<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sentence = <span class="hljs-string">&quot;John likes to watch movies. Mary likes movies too.&quot;</span><br>    <span class="hljs-built_in">print</span>(sentence_to_bow(sentence))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Natural Language Processing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello Markdown</title>
    <link href="/2023/01/01/Hello-Markdown/"/>
    <url>/2023/01/01/Hello-Markdown/</url>
    
    <content type="html"><![CDATA[<p>Markdown<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://en.wikipedia.org/wiki/Markdown">[1]</span></a></sup> 是一种轻量级的标记语言。相比于纯文本，Markdown 有更多的格式化内容，例如粗体、斜体、标题、列表、链接和图片。同时相较于 LaTeX<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://en.wikipedia.org/wiki/LaTeX">[2]</span></a></sup> 而言 Markdown 的语法简单，易于使用，能够轻松地创建轻量级文档，即使在未渲染的情况下，Markdown 文档也易于阅读。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>首先文档不可缺少的元素是<strong>标题</strong>。标题由一级标题直到六级标题，在标题文本前方添加 <code>#</code> 来创建标题。<code>#</code> 的数量决定了标题的层次和大小</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><p>如上格式会显示为如下：</p><p><img src="https://s2.loli.net/2023/12/19/sEDWSrd6BMF35o7.png" alt="markdown_headers.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/Markdown">https://en.wikipedia.org/wiki/Markdown</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/LaTeX">https://en.wikipedia.org/wiki/LaTeX</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
